def open_booking_page(user_email):
    booking_window = tk.Toplevel()
    booking_window.title("Booking Page")
    booking_window.geometry("350x400")

    booking_type_var = tk.StringVar()
    service_var = tk.StringVar()

    tk.Label(booking_window, text="Booking Type:").pack(pady=5)
    booking_types = ["Installation", "Consultation"]
    booking_type_dropdown = ttk.Combobox(booking_window, textvariable=booking_type_var, values=booking_types)
    booking_type_dropdown.pack(pady=5)

    tk.Label(booking_window, text="Service:").pack(pady=5)
    service_dropdown = ttk.Combobox(booking_window, textvariable=service_var)
    service_dropdown.pack(pady=5)

    def update_services(*args):
        if booking_type_var.get() == "Installation":
            service_dropdown["values"] = ["EV Charging", "HEM Install", "Other"]
        else:
            service_dropdown["values"] = ["General Consultation"]
        service_var.set("")

    booking_type_var.trace("w", update_services)

    tk.Label(booking_window, text="Date (DD-MM-YYYY):").pack(pady=5)
    date_entry = tk.Entry(booking_window)
    date_entry.pack(pady=5)

    tk.Label(booking_window, text="Time (HH:MM):").pack(pady=5)
    time_entry = tk.Entry(booking_window)
    time_entry.pack(pady=5)

    def book():
        b_type = booking_type_var.get()
        service = service_var.get()
        date = date_entry.get()
        time = time_entry.get()

        if not all([b_type, service, date, time]):
            messagebox.showerror("Error", "All fields are required.")
            return

        if not re.match(r"^\d{2}-\d{2}-\d{4}$", date):
            messagebox.showerror("Error", "Invalid date format. Use DD-MM-YYYY.")
            return
        if not re.match(r"^([01]\d|2[0-3]):([0-5]\d)$", time):
            messagebox.showerror("Error", "Invalid time format. Use HH:MM.")
            return

        try:
            cursor.execute("INSERT INTO bookings (user_email, booking_type, service, date, time) VALUES (?, ?, ?, ?, ?)",
                           (user_email, b_type, service, date, time))
            db.commit()
            messagebox.showinfo("Success", "Booking confirmed!")
        except sqlite3.Error as e:
            messagebox.showerror("Database Error", str(e))

    tk.Button(booking_window, text="Confirm Booking", command=book).pack(pady=10)
